plugins {
	id 'fabric-loom' version '0.10-SNAPSHOT'
	id 'maven-publish'
	id "com.matthewprenger.cursegradle" version "1.4.0"
	id "com.modrinth.minotaur" version "1.2.1"
}

import com.modrinth.minotaur.TaskModrinthUpload

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	mavenCentral()
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
}

loom {

}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	include "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {exclude(group: "net.fabricmc.fabric-api")}
	include("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {exclude(group: "net.fabricmc.fabric-api")}
	implementation 'org.codehaus.groovy:groovy-all:3.+'
	include 'org.codehaus.groovy:groovy-all:3.+'
	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.18 upwards uses Java 17.
	it.options.release = 17
}

// https://www.curseforge.com/minecraft/mc-mods/kajava
curseforge {
	if (project.hasProperty('curseForgeApiKeyKajava')) apiKey = project.findProperty("curseForgeApiKeyKajava")
	else apiKey = "DUMMY"
	project {
		id = '548112'
		changelogType = "markdown"
		changelog = "Changelog can be founded at [Commits](https://github.com/kadir1243/kajava/commits/1.17)"
		releaseType = 'alpha'
		addGameVersion project.minecraft_version
		addGameVersion "Fabric"

		mainArtifact(remapJar) {
			displayName =  "${project.archives_base_name} ${project.version}-${project.minecraft_version}"
		}

		relations {
			embeddedLibrary 'fabric-api'
			embeddedLibrary 'cloth-config'
		}
		options {
			forgeGradleIntegration = false
		}
	}
}

// https://modrinth.com/mod/kajava
task publishModrinth (type: TaskModrinthUpload) {
	if (project.hasProperty('modrinthTokenKajava')) token = project.findProperty("modrinthTokenKajava")
	else token = "DUMMY"
	projectId = '3frGeH2B'
	versionNumber = project.version
	uploadFile = remapJar
	addGameVersion(project.minecraft_version)
	addLoader('fabric')
}

javadoc {
	source = sourceSets.main.allJava
	classpath = sourceSets.main.compileClasspath + sourceSets.main.output

	options.addStringOption('Xdoclint:none', '-quiet')
	options.encoding = 'UTF-8'
	options.charSet = 'UTF-8'
}

task javadocJar(type: Jar, dependsOn: javadoc, group: "build") {
	archiveClassifier = "javadoc"
	from javadoc.destinationDir
}

java {
	withJavadocJar()
	withSourcesJar()
}

task publishToPlatforms {
	dependsOn(publish,publishModrinth,tasks.getByName('curseforge'))
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java

			artifact javadocJar
		}
	}

	// maven published at : https://mymavenrepo.com/repo/y9bmQiqluv2BrIIsqiol/
	repositories {
		mavenLocal()
		maven {
			if (project.hasProperty("myMavenRepoWriteUrl")) url = project.findProperty("myMavenRepoWriteUrl")
			credentials {
				username 'myMavenRepo'
				if (project.hasProperty("myMavenRepoWritePassword")) password project.findProperty("myMavenRepoWritePassword")
			}
		}
	}
}
